name: Version Bump and Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write
  actions: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Extract version number without 'v' prefix
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate next version
        id: next_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            # Use custom version if provided
            NEXT_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEXT_VERSION"
          else
            # Parse current version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            
            # Bump version based on type
            case "${{ github.event.inputs.version_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Bumped ${{ github.event.inputs.version_type }} version: $NEXT_VERSION"
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "next_tag=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          
          # Extract major version for tagging
          MAJOR_VERSION=$(echo $NEXT_VERSION | cut -d. -f1)
          echo "major_version=v$MAJOR_VERSION" >> $GITHUB_OUTPUT

      - name: Update version.txt
        run: |
          echo "${{ steps.next_version.outputs.next_version }}" > version.txt
          echo "Updated version.txt to ${{ steps.next_version.outputs.next_version }}"

      - name: Run tests
        run: |
          # Run basic tests first
          python3 tests/test_basic.py

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add version.txt
          git commit -m "Bump version to ${{ steps.next_version.outputs.next_version }}"
          git push

      - name: Create and push tag
        run: |
          # Create the new version tag
          git tag -a ${{ steps.next_version.outputs.next_tag }} -m "Release ${{ steps.next_version.outputs.next_version }}"
          git push origin ${{ steps.next_version.outputs.next_tag }}
          
          echo "âœ… Created and pushed tag ${{ steps.next_version.outputs.next_tag }}"

      - name: Summary
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.next_version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created:** ${{ steps.next_version.outputs.next_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Major Version:** ${{ steps.next_version.outputs.major_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸš€ **Release workflow will now trigger automatically!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Users will be able to use:" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          echo "uses: sanjeevkumarraob/version-system@${{ steps.next_version.outputs.major_version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
