name: Version Bump and Tag

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
  
  # Automatic trigger on main branch pushes (but not for version bump commits)
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'  # Ignore workflow changes to prevent loops

permissions:
  contents: write
  actions: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    # Skip if this is a workflow file change or if commit message contains [skip-release]
    if: |
      !contains(github.event.head_commit.message, '[skip-release]') &&
      !contains(github.event.head_commit.message, 'Update major version tag')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate version and create release using our own action
        id: version
        uses: ./
        with:
          VERSION_FILE: "version.txt"
          GIT_REPO_PATH: "."
          CREATE_RELEASE: true

      - name: Update major version tag
        run: |
          # Extract major version (e.g., 1.2.3 -> 1)
          MAJOR_VERSION=$(echo ${{ steps.version.outputs.version }} | cut -d. -f1)
          MAJOR_TAG="v${MAJOR_VERSION}"
          
          echo "Updating major version tag: $MAJOR_TAG"
          
          # Delete existing major version tag if it exists
          git tag -d $MAJOR_TAG 2>/dev/null || true
          git push origin :refs/tags/$MAJOR_TAG 2>/dev/null || true
          
          # Create new major version tag pointing to the new release tag
          git tag $MAJOR_TAG ${{ steps.version.outputs.version }}
          git push origin $MAJOR_TAG
          
          echo "âœ… Updated major version tag $MAJOR_TAG to point to ${{ steps.version.outputs.version }}"

      - name: Summary
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          MAJOR_VERSION=$(echo ${{ steps.version.outputs.version }} | cut -d. -f1)
          echo "- **Major Tag Updated:** v$MAJOR_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸš€ **Release created successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Usage for Users" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          echo "uses: sanjeevkumarraob/version-system@v$MAJOR_VERSION  # Latest v$MAJOR_VERSION.x.x" >> $GITHUB_STEP_SUMMARY
          echo "uses: sanjeevkumarraob/version-system@${{ steps.version.outputs.version }}      # Specific version" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
