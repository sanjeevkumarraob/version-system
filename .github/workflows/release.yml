name: Release Version System

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Run basic tests first
          python3 tests/test_basic.py

      - name: Extract version info
        id: version
        run: |
          # Get the tag name (e.g., v1.2.3)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Extract major version (e.g., v1.2.3 -> v1)
          MAJOR_VERSION=$(echo $TAG_NAME | cut -d. -f1)
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
          
          # Extract version without 'v' prefix (e.g., v1.2.3 -> 1.2.3)
          VERSION_NUMBER=${TAG_NAME#v}
          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains alpha, beta, rc)
          if [[ $TAG_NAME =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Version System ${{ steps.version.outputs.version_number }}
          
          ### üöÄ Features
          - Automated semantic versioning for GitHub Actions
          - Support for prefixes, suffixes, and module-specific versioning
          - 97% test coverage with comprehensive test suite
          - Docker support for containerized environments
          - Security validations and path traversal protection
          
          ### üì¶ Usage
          ```yaml
          - name: Generate Version
            uses: sanjeevkumarraob/version-system@${{ steps.version.outputs.major_version }}
            with:
              VERSION_FILE: "version.txt"
              GIT_REPO_PATH: "."
          ```
          
          ### üîß What's Changed
          - See [CHANGELOG.md](https://github.com/sanjeevkumarraob/version-system/blob/main/CHANGELOG.md) for detailed changes
          
          ### üìã Full Documentation
          - [README.md](https://github.com/sanjeevkumarraob/version-system/blob/main/README.md)
          - [Contributing Guidelines](https://github.com/sanjeevkumarraob/version-system/blob/main/CONTRIBUTING.md)
          EOF
          
          echo "Generated release notes for ${{ steps.version.outputs.tag_name }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: Version System ${{ steps.version.outputs.version_number }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.version.outputs.is_prerelease }}

      - name: Update major version tag
        run: |
          # Delete existing major version tag if it exists
          git tag -d ${{ steps.version.outputs.major_version }} 2>/dev/null || true
          git push origin :refs/tags/${{ steps.version.outputs.major_version }} 2>/dev/null || true
          
          # Create new major version tag pointing to current commit
          git tag ${{ steps.version.outputs.major_version }}
          git push origin ${{ steps.version.outputs.major_version }}
          
          echo "‚úÖ Updated major version tag ${{ steps.version.outputs.major_version }} to point to ${{ steps.version.outputs.tag_name }}"

      - name: Build and test Docker image
        run: |
          # Build Docker image
          docker build -t version-system:${{ steps.version.outputs.version_number }} .
          docker build -t version-system:${{ steps.version.outputs.major_version }} .
          docker build -t version-system:latest .
          
          # Test Docker image
          echo "3.0.0" > test_version.txt
          docker run --rm -v $(pwd):/workspace version-system:latest \
            -f /workspace/test_version.txt -r /workspace
          
          echo "‚úÖ Docker image built and tested successfully"

  notify:
    needs: release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify release status
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "üéâ Release ${{ github.ref_name }} completed successfully!"
            echo "Users can now use: sanjeevkumarraob/version-system@${GITHUB_REF#refs/tags/v}"
          else
            echo "‚ùå Release ${{ github.ref_name }} failed!"
            exit 1
          fi
